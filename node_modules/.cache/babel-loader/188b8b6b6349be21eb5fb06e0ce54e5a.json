{"ast":null,"code":"import { atom, selectorFamily } from \"recoil\";\nconst systemState = atom({\n  key: \"systemState\",\n  default: {\n    isTestMode: true\n  }\n});\nconst prevRouteNameState = atom({\n  key: \"prevRouteNameState\",\n  default: \"\"\n});\nconst testModeState = selectorFamily({\n  key: \"testModeState\",\n  get: () => ({\n    get\n  }) => {\n    const system = get(systemState);\n    return system.isTestMode;\n  }\n});\nconst viewNavigationState = atom({\n  key: \"viewNavigationState\",\n  default: {\n    showHeaderOnMobile: false,\n    isMobileView: false,\n    hideNavigation: false\n  }\n});\nexport { systemState, prevRouteNameState, viewNavigationState, testModeState };","map":{"version":3,"sources":["/Users/jayounglee/nway/nwayplay-boilerplate-fe/src/store/index.ts"],"names":["atom","selectorFamily","systemState","key","default","isTestMode","prevRouteNameState","testModeState","get","system","viewNavigationState","showHeaderOnMobile","isMobileView","hideNavigation"],"mappings":"AAAA,SAASA,IAAT,EAA+BC,cAA/B,QAAqD,QAArD;AAGA,MAAMC,WAAW,GAAGF,IAAI,CAAC;AACvBG,EAAAA,GAAG,EAAE,aADkB;AAEvBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAE;AADL;AAFc,CAAD,CAAxB;AAOA,MAAMC,kBAAkB,GAAGN,IAAI,CAAC;AAC9BG,EAAAA,GAAG,EAAE,oBADyB;AAE9BC,EAAAA,OAAO,EAAE;AAFqB,CAAD,CAA/B;AAKA,MAAMG,aAAa,GAAGN,cAAc,CAAC;AACnCE,EAAAA,GAAG,EAAE,eAD8B;AAEnCK,EAAAA,GAAG,EAAE,MAAM,CAAC;AAAEA,IAAAA;AAAF,GAAD,KAAsC;AAC/C,UAAMC,MAAM,GAAGD,GAAG,CAACN,WAAD,CAAlB;AACA,WAAOO,MAAM,CAACJ,UAAd;AACD;AALkC,CAAD,CAApC;AAQA,MAAMK,mBAAmB,GAAGV,IAAI,CAAC;AAC/BG,EAAAA,GAAG,EAAE,qBAD0B;AAE/BC,EAAAA,OAAO,EAAE;AACPO,IAAAA,kBAAkB,EAAE,KADb;AAEPC,IAAAA,YAAY,EAAE,KAFP;AAGPC,IAAAA,cAAc,EAAE;AAHT;AAFsB,CAAD,CAAhC;AASA,SAASX,WAAT,EAAsBI,kBAAtB,EAA0CI,mBAA1C,EAA+DH,aAA/D","sourcesContent":["import { atom, GetRecoilValue, selectorFamily } from \"recoil\";\nimport { System } from \"types\";\n\nconst systemState = atom({\n  key: \"systemState\",\n  default: {\n    isTestMode: true,\n  } as System,\n});\n\nconst prevRouteNameState = atom({\n  key: \"prevRouteNameState\",\n  default: \"\",\n});\n\nconst testModeState = selectorFamily({\n  key: \"testModeState\",\n  get: () => ({ get }: { get: GetRecoilValue }) => {\n    const system = get(systemState);\n    return system.isTestMode;\n  },\n});\n\nconst viewNavigationState = atom({\n  key: \"viewNavigationState\",\n  default: {\n    showHeaderOnMobile: false,\n    isMobileView: false,\n    hideNavigation: false,\n  },\n});\n\nexport { systemState, prevRouteNameState, viewNavigationState, testModeState };\n"]},"metadata":{},"sourceType":"module"}