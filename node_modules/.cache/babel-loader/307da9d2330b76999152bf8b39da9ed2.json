{"ast":null,"code":"import amplitude from \"amplitude-js\";\nimport configs from \"configs\";\nimport { isMobile, osName, isDesktop, browserVersion, deviceType } from \"react-device-detect\";\nexport class AmplitudeManager {\n  constructor() {\n    this.defaultInstance = void 0;\n    this.versionName = void 0;\n\n    if (configs.AMPLITUDE_KEY === undefined || configs.AMPLITUDE_KEY === \"\") {\n      this.defaultInstance = null;\n      this.versionName = \"\";\n      return;\n    }\n\n    this.versionName = \"Web\";\n    amplitude.getInstance().init(configs.AMPLITUDE_KEY, undefined, {\n      logLevel: \"DISABLE\",\n      includeReferrer: true,\n      includeUtm: true,\n      includeGclid: true\n    }, () => {});\n    amplitude.getInstance().setVersionName(this.versionName);\n    this.defaultInstance = amplitude.getInstance();\n  }\n\n  static get Instance() {\n    return this._instance || (this._instance = new this());\n  } // logs ==============================================================\n  // action\n\n\n  logEventWalletPage() {\n    this.logEvent(\"visitedWalletPage\", null);\n  }\n\n  logClick(clicked, page, userId = \"\") {\n    this.logEvent(\"Click\", {\n      clicked,\n      page\n    }, userId);\n  }\n\n  onLoadpage(url) {\n    this.logEvent(\"OnLoadpage\", {\n      url\n    });\n  } // private ==============================================================\n\n\n  mergeWithDeviceInfo(data) {\n    const device = {\n      OS: osName,\n      BrowserVersion: browserVersion,\n      DeviceType: deviceType,\n      IsDesktop: isDesktop,\n      isMobile: isMobile\n    };\n    return { ...data,\n      ...device\n    };\n  }\n\n  logEvent(event, eventData, userId = \"\") {\n    if (this.defaultInstance === null) {\n      return;\n    }\n\n    try {\n      if (userId !== \"\") {\n        this.defaultInstance.setUserId(this.getUserId(userId));\n      }\n\n      this.defaultInstance.logEvent(event, this.mergeWithDeviceInfo({\n        eventData\n      }));\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  logRevenue(productId, price, quantity, userId = \"\") {\n    if (this.defaultInstance === null) {\n      return;\n    }\n\n    try {\n      if (userId !== \"\") {\n        this.defaultInstance.setUserId(this.getUserId(userId));\n      }\n\n      const revenue = new amplitude.Revenue().setProductId(productId).setPrice(price).setQuantity(quantity);\n      this.defaultInstance.logRevenueV2(revenue);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  getUserId(userId) {\n    return `userId:${String(userId)}`;\n  }\n\n}\nAmplitudeManager._instance = void 0;","map":{"version":3,"sources":["/Users/jayounglee/nway/nwayplay-boilerplate-fe/src/utils/AmplitudeManager.ts"],"names":["amplitude","configs","isMobile","osName","isDesktop","browserVersion","deviceType","AmplitudeManager","constructor","defaultInstance","versionName","AMPLITUDE_KEY","undefined","getInstance","init","logLevel","includeReferrer","includeUtm","includeGclid","setVersionName","Instance","_instance","logEventWalletPage","logEvent","logClick","clicked","page","userId","onLoadpage","url","mergeWithDeviceInfo","data","device","OS","BrowserVersion","DeviceType","IsDesktop","event","eventData","setUserId","getUserId","error","console","logRevenue","productId","price","quantity","revenue","Revenue","setProductId","setPrice","setQuantity","logRevenueV2","String"],"mappings":"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","sourcesContent":["import amplitude from \"amplitude-js\";\nimport configs from \"configs\";\nimport {\n  isMobile,\n  osName,\n  isDesktop,\n  browserVersion,\n  deviceType,\n} from \"react-device-detect\";\n\nexport class AmplitudeManager {\n  private static _instance: AmplitudeManager;\n  private defaultInstance: amplitude.AmplitudeClient | null;\n  private versionName: string;\n\n  private constructor() {\n    if (configs.AMPLITUDE_KEY === undefined || configs.AMPLITUDE_KEY === \"\") {\n      this.defaultInstance = null;\n      this.versionName = \"\";\n      return;\n    }\n\n    this.versionName = \"Web\";\n\n    amplitude.getInstance().init(\n      configs.AMPLITUDE_KEY,\n      undefined,\n      {\n        logLevel: \"DISABLE\",\n        includeReferrer: true,\n        includeUtm: true,\n        includeGclid: true,\n      },\n      () => {}\n    );\n    amplitude.getInstance().setVersionName(this.versionName);\n    this.defaultInstance = amplitude.getInstance();\n  }\n\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // logs ==============================================================\n\n  // action\n\n  public logEventWalletPage() {\n    this.logEvent(\"visitedWalletPage\", null);\n  }\n\n  public logClick(clicked: string, page: string, userId: number | string = \"\") {\n    this.logEvent(\n      \"Click\",\n      {\n        clicked,\n        page,\n      },\n      userId\n    );\n  }\n\n  public onLoadpage(url: string) {\n    this.logEvent(\"OnLoadpage\", {\n      url,\n    });\n  }\n\n  // private ==============================================================\n\n  private mergeWithDeviceInfo(data: any) {\n    const device = {\n      OS: osName,\n      BrowserVersion: browserVersion,\n      DeviceType: deviceType,\n      IsDesktop: isDesktop,\n      isMobile: isMobile,\n    };\n\n    return { ...data, ...device };\n  }\n\n  private logEvent(\n    event: string,\n    eventData: any,\n    userId: number | string = \"\"\n  ) {\n    if (this.defaultInstance === null) {\n      return;\n    }\n\n    try {\n      if (userId !== \"\") {\n        this.defaultInstance.setUserId(this.getUserId(userId));\n      }\n\n      this.defaultInstance.logEvent(\n        event,\n        this.mergeWithDeviceInfo({ eventData })\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private logRevenue(\n    productId: string,\n    price: number,\n    quantity: number,\n    userId: number | string = \"\"\n  ) {\n    if (this.defaultInstance === null) {\n      return;\n    }\n\n    try {\n      if (userId !== \"\") {\n        this.defaultInstance.setUserId(this.getUserId(userId));\n      }\n\n      const revenue = new amplitude.Revenue()\n        .setProductId(productId)\n        .setPrice(price)\n        .setQuantity(quantity);\n      this.defaultInstance.logRevenueV2(revenue);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private getUserId(userId: number | string) {\n    return `userId:${String(userId)}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}